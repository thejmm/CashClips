// src/lib/editor-lib/generate-code.ts

import {
  Component,
  Section,
} from "../../context/editor-context/editor-provider";

import { componentPaths } from "./component-loader";

interface GeneratedCode {
  pages: {
    _app: string;
    index: string;
  };
  components: Record<string, string>;
  sections: Record<string, string>;
  backgrounds: Record<string, string>;
}

export function generateCode(
  components: Component[],
  sections: Section[],
): GeneratedCode {
  const usedComponents = new Set(
    [...components, ...sections].map((c) => c.type),
  );

  // Generate _app.tsx
  const appCode = `
import type { AppProps } from 'next/app'
import '../styles/globals.css'

function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}

export default MyApp
  `.trim();

  // Generate index.tsx
  const indexCode = `
import type { NextPage } from 'next'
import Head from 'next/head'
import { ${Array.from(usedComponents).join(", ")} } from '../components'

const Home: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Generated Page</title>
        <meta name="description" content="Generated by BuildFlow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
${[...sections, ...components]
  .sort((a, b) => (a.position.y || 0) - (b.position.y || 0))
  .map((item) => {
    const props = Object.entries({ ...item.properties, ...item.customProps })
      .map(([key, value]) => `${key}={${JSON.stringify(value)}}`)
      .join(" ");
    return `        <${item.type} ${props} />`;
  })
  .join("\n")}
      </main>
    </div>
  )
}

export default Home
  `.trim();

  // Generate component files
  const componentCodes: Record<string, string> = {};
  const sectionCodes: Record<string, string> = {};
  const backgroundCodes: Record<string, string> = {};

  usedComponents.forEach((componentType) => {
    const [type, category, name] = componentType.split("-");
    let code: string;

    if (type === "backgrounds") {
      code = generateComponentCode(componentType, "background");
      backgroundCodes[componentType] = code;
    } else if (type === "sections") {
      code = generateComponentCode(componentType, "section");
      sectionCodes[componentType] = code;
    } else {
      code = generateComponentCode(componentType, "component");
      componentCodes[componentType] = code;
    }
  });

  return {
    pages: {
      _app: appCode,
      index: indexCode,
    },
    components: componentCodes,
    sections: sectionCodes,
    backgrounds: backgroundCodes,
  };
}

function generateComponentCode(
  componentType: string,
  elementType: "component" | "section" | "background",
): string {
  const componentPath = componentPaths[componentType];
  if (!componentPath) {
    return `
import React from 'react'
import { ${componentType}Props } from '../types'

const ${componentType}: React.FC<${componentType}Props> = (props) => {
  return (
    <${
      elementType === "background" ? "div" : elementType
    } className="${elementType}">
      {/* ${componentType} implementation */}
    </${elementType === "background" ? "div" : elementType}>
  )
}

export default ${componentType}
    `.trim();
  }

  // If we have the actual component, we can generate more accurate code
  return `
import React from 'react'
import { ${componentType} as Original${componentType} } from '${componentPath}'
import { ${componentType}Props } from '../types'

const ${componentType}: React.FC<${componentType}Props> = (props) => {
  return <Original${componentType} {...props} />
}

export default ${componentType}
  `.trim();
}
